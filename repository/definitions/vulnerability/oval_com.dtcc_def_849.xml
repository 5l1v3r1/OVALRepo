<oval-def:definition xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" class="vulnerability" id="oval:com.dtcc:def:849" version="0">
  <oval-def:metadata>
    <oval-def:title>Python Heap-Buffer-Overflow vulnerability - CVE-2018-1000030</oval-def:title>
    <oval-def:affected family="windows">
      <oval-def:platform>Microsoft Windows 7</oval-def:platform>
      <oval-def:platform>Microsoft Windows 8</oval-def:platform>
      <oval-def:platform>Microsoft Windows 8.1</oval-def:platform>
      <oval-def:platform>Microsoft Windows 10</oval-def:platform>
      <oval-def:platform>Microsoft Windows Server 2008 R2</oval-def:platform>
      <oval-def:platform>Microsoft Windows Server 2012</oval-def:platform>
      <oval-def:platform>Microsoft Windows Server 2012 R2</oval-def:platform>
      <oval-def:platform>Microsoft Windows Server 2016</oval-def:platform>
      <oval-def:product>Python</oval-def:product>
    </oval-def:affected>
    <oval-def:reference ref_id="CVE-2018-1000030" ref_url="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000030" source="CVE" />
    <oval-def:description>Python 2.7.14 is vulnerable to a Heap-Buffer-Overflow as well as a Heap-Use-After-Free. Python versions prior to 2.7.14 may also be vulnerable and it appears that Python 2.7.17 and prior may also be vulnerable however this has not been confirmed. The vulnerability lies when multiply threads are handling large amounts of data. In both cases there is essentially a race condition that occurs. For the Heap-Buffer-Overflow, Thread 2 is creating the size for a buffer, but Thread1 is already writing to the buffer without knowing how much to write. So when a large amount of data is being processed, it is very easy to cause memory corruption using a Heap-Buffer-Overflow. As for the Use-After-Free, Thread3-&gt;Malloc-&gt;Thread1-&gt;Free's-&gt;Thread2-Re-uses-Free'd Memory. The PSRT has stated that this is not a security vulnerability due to the fact that the attacker must be able to run code, however in some situations, such as function as a service, this vulnerability can potentially be used by an attacker to violate a trust boundary, as such the DWF feels this issue deserves a CVE.</oval-def:description>
    <oval-def:oval_repository>
      <oval-def:dates>
        <oval-def:submitted date="2018-06-20T10:31:28+00:00">
          <oval-def:contributor organization="DTCC">Jose Israel Padilla</oval-def:contributor>
        </oval-def:submitted>
      </oval-def:dates>
      <oval-def:status>INITIAL SUBMISSION</oval-def:status>
    </oval-def:oval_repository>
  </oval-def:metadata>
  <oval-def:criteria comment="Check for installation of Python + vulnerable version" operator="AND">
    <oval-def:extend_definition comment="Python is installed" definition_ref="oval:org.mitre.oval:def:11791" />
    <oval-def:criteria comment="Check for vulnerable version" operator="OR">
      <oval-def:criterion comment="Check if Python version is less than 2.7.14 (Single User)" test_ref="oval:com.dtcc:tst:1883" />
      <oval-def:criterion comment="Check if Python version is greater than or equal 2.7.0 and less than 2.7.13 (Single User)" test_ref="oval:com.dtcc:tst:1884" />
      <oval-def:criterion comment="Check if Python version is less than 2.7.14 (All Users)" test_ref="oval:com.dtcc:tst:1886" />
      <oval-def:criterion comment="Check if Python version is greater than or equal 2.7.0 and less than 2.7.13 (All Users)" test_ref="oval:com.dtcc:tst:1887" />
    </oval-def:criteria>
  </oval-def:criteria>
</oval-def:definition>
